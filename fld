#!/usr/bin/env bash
#
# field - print fields
#
# Print fields, where fields are separated by white space.  Blank
# lines are ignored.  Fields that do not exist are ignored.
#
# usage: field [item] ...
#
#	item == 3	=> 3rd field
#	item == e	=> last field
#	item == e-2	=> third from last field
#	else		=> print item
#
# Copyright (c) 1989,1999-2000,2015,2023,2025 by Landon Curt Noll.  All Rights Reserved.
#
# Permission to use, copy, modify, and distribute this software and
# its documentation for any purpose and without fee is hereby granted,
# provided that the above copyright, this permission notice and text
# this comment, and the disclaimer below appear in all of the following:
#
#       supporting documentation
#       source copies
#       source works derived from this source
#       binaries derived from this source or from derived source
#
# LANDON CURT NOLL DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE,
# INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS. IN NO
# EVENT SHALL LANDON CURT NOLL BE LIABLE FOR ANY SPECIAL, INDIRECT OR
# CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF
# USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
# OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
# PERFORMANCE OF THIS SOFTWARE.
#
# chongo (Landon Curt Noll) /\oo/\
#
# http://www.isthe.com/chongo/index.html
# https://github.com/lcn2
#
# Share and enjoy!  :-)


# setup
#
export VERSION="1.3.1 2025-03-30"
NAME=$(basename "$0")
export NAME
#
export V_FLAG=0
#
export DO_NOT_PROCESS=


# usage
#
export USAGE="usage: $0 [-h] [-v level] [-V] [-N] [field ...]

    -h          print help message and exit
    -v level    set verbosity level (def level: $V_FLAG)
    -V          print version string and exit

    -N          do not process anything, just parse arguments (def: process something)

    [field ...]	    field number to print, or e ==> last field, or e-X ==> X-th from last field

Exit codes:
     0         all OK
     1         the constructed awk command failed
     2         -h and help string printed or -V and version string printed
     3         command line error
 >= 10         internal error

$NAME version: $VERSION"


# parse command line
#
while getopts :hv:VN flag; do
  case "$flag" in
    h) echo "$USAGE"
        exit 2
        ;;
    v) V_FLAG="$OPTARG"
        ;;
    V) echo "$VERSION"
        exit 2
        ;;
    N) DO_NOT_PROCESS="-N"
        ;;
    \?) echo "$0: ERROR: invalid option: -$OPTARG" 1>&2
        echo 1>&2
        echo "$USAGE" 1>&2
        exit 3
        ;;
    :) echo "$0: ERROR: option -$OPTARG requires an argument" 1>&2
        echo 1>&2
        echo "$USAGE" 1>&2
        exit 3
        ;;
    *) echo "$0: ERROR: unexpected value from getopts: $flag" 1>&2
        echo 1>&2
        echo "$USAGE" 1>&2
        exit 3
        ;;
  esac
done
if [[ $V_FLAG -ge 1 ]]; then
    echo "$0: debug[1]: debug level: $V_FLAG" 1>&2
fi
#
# remove the options
#
shift $(( OPTIND - 1 ));


# print running info if verbose
#
# If -v 3 or higher, print exported variables in order that they were exported.
#
if [[ $V_FLAG -ge 3 ]]; then
    echo "$0: debug[3]: VERSION=$VERSION" 1>&2
    echo "$0: debug[3]: NAME=$NAME" 1>&2
    echo "$0: debug[3]: V_FLAG=$V_FLAG" 1>&2
    echo "$0: debug[3]: DO_NOT_PROCESS=$DO_NOT_PROCESS" 1>&2
fi
if [[ $V_FLAG -ge 1 ]]; then
    echo "$0: debug[1]: field args: $*" 1>&2
fi


# -N stops early before any processing is performed
#
if [[ -n $DO_NOT_PROCESS ]]; then
    if [[ $V_FLAG -ge 3 ]]; then
        echo "$0: debug[3]: arguments parsed, -N given, exiting 0" 1>&2
    fi
    exit 0
fi



# convert args to awk directives
#
if [[ $# -ne 0 ]]; then
    # We do not want to expand what shellcheck thinks is an expression
    #
    # SC2016 (info): Expressions don't expand in single quotes, use double quotes for that.
    # https://www.shellcheck.net/wiki/SC2016
    # shellcheck disable=SC2016
    col=$(echo "$@" |
         sed -e 's/[	 ]/  /g' -e 's/^/ /' \
	     -e 's/$/ /' \
	     -e 's/ 0[^ ]* / 1 /g' \
	     -e 's/ e / 0 /g' \
	     -e 's/ e-\([0-9][0-9]*\) / 0\1 /g' \
	     -e 's/ \([0-9]*[^ 0-9][^ ]*\) / printf \"%s \",\"\1\"; /g' \
	     -e 's/ 0 / printf \"%s \",$NF; /g' \
	     -e 's/ 0\([0-9][0-9]*\) / if(NF>\1)printf \"%s \",$(NF-\1); /g' \
	     -e 's/ \([0-9][0-9]*\) / if(\1<=NF)printf \"%s \",$\1; /g' \
	     -e 's/%s \([^%]*\)$/%s\1/')
else
    if [[ $V_FLAG -ge 1 ]]; then
	echo "$0: debug[3]: no field args given, just cat stdin to stdout" 1>&2
    fi
    cat
    exit 0
fi


# awk to print fields
#
if [[ $V_FLAG -ge 1 ]]; then
    # We do not want to expand shellcheck thinks is an escape sequence
    #
    # SC2028 (info): echo may not expand escape sequences. Use printf.
    # https://www.shellcheck.net/wiki/SC2028
    # shellcheck disable=SC2028
    echo "$0: debug[3]: awk code: /./ {$col; printf "'"\n"'";}" 1>&2
fi
awk "/./ {$col; printf "'"\n"'";}"
status="$?"
if [[ $status -ne 0 ]]; then
    # We do not want to expand shellcheck thinks is an escape sequence
    #
    # SC2028 (info): echo may not expand escape sequences. Use printf.
    # https://www.shellcheck.net/wiki/SC2028
    # shellcheck disable=SC2028
    echo "$0: ERROR: awk /./ {$col; printf "'"\n"'";} failed, error: $status" 1>&2
    exit 1
fi


# All Done!!! -- Jessica Noll, Age 2
#
exit 0
